= Introduction

This is the documentation for both Sunspot and Sunspot::Rails.

* Sunspot - a Ruby library for expressive, powerful interaction with the Solr
search engine
* Sunspot::Rails - a Rails plugin that provides drop-in integration of the Solr search library with Rails using Sunspot

= Sunspot

http://outoftime.github.com/sunspot

Sunspot is a Ruby library for expressive, powerful interaction with the Solr
search engine. Sunspot is built on top of the RSolr library, which
provides a low-level interface for Solr interaction; Sunspot provides a simple,
intuitive, expressive DSL backed by powerful features for indexing objects and
searching for them.

Sunspot is designed to be easily plugged in to any ORM, or even non-database-backed
objects such as the filesystem.

=== Where to learn all about Sunspot: The Wiki!

New to Sunspot and using Rails? Check out {Adding Sunspot search to Rails in 5
minutes or less}[http://wiki.github.com/outoftime/sunspot/adding-sunspot-search-to-rails-in-5-minutes-or-less].

This README is intended as a quick primer on what Sunspot is capable of; for
detailed treatment of Sunspot's full feature range, check out the wiki:
http://wiki.github.com/outoftime/sunspot

The API documentation is also complete and up-to-date; however, because of the
way Sunspot is structured, it's not the easiest way for new users to get to know
the library.

=== Features:

* Define indexing strategy for each searchable class using intuitive block-based
  API
* Clean separation between keyword-searchable fields and fields for
  scoping/ordering
* Define fields based on existing attributes or "virtual fields" for custom
  indexing
* Indexes each object's entire superclass hierarchy, for easy searching for all
  objects inheriting from a parent class
* Intuitive DSL for scoping searches, with all the usual boolean operators
  available
* Intuitive interface for requesting facets on indexed fields
* Extensible adapter architecture for easy integration of other ORMs or
  non-model classes
* Refine search using field facets, date range facets, or ultra-powerful
  query facets
* Full compatibility with will_paginate
* Ordering by field value, relevance, geographical distance, or random

== Installation

  gem install sunspot
  
There is also a more tightly integration into a Rails environment available. For more info see the "Sunspot::Rails" section of this documentation

In order to start the packaged Solr installation, run:

  sunspot-solr start -- [-d /path/to/data/directory] [-p port] [-s path/to/solr/home] [--pid-dir=path/to/pid/dir]

If you don't specify a data directory, your Solr index will be stored in your
operating system's temporary directory.

If you specify a solr home, the directory must contain a <code>conf</code>
directory, which should contain at least <code>schema.xml</code> and
<code>solrconfig.xml</code>. Be sure to copy the <code>schema.xml</code> out of
the Sunspot gem's <code>solr/solr/conf</code> directory. Sunspot relies on the
field name patterns defined in the packaged <code>schema.xml</code>, so those
cannot be modified.

You can also run your own instance of Solr wherever you'd like; just copy the solr/config/schema.xml file out of the gem's solr into your installation.
You can change the URL at which Sunspot accesses Solr by setting <code>SOLR_URL</code> in your application's environment, or assigning it to Sunspot's configuration directly:

  Sunspot.config.solr.url = 'http://solr.my.host:9818/solr'

== Rails Integration

The Sunspot::Rails plugin makes integrating Sunspot into Rails drop-in easy.

    gem install sunspot_rails

See the README for that gem or the Sunspot Wiki for more information.

== Using Sunspot

=== Define an index:

  class Post
    #...
  end

  Sunspot.setup(Post) do
    text :title, :description, :stored => true
    string :author_name
    integer :blog_id
    integer :category_ids
    float :average_rating, :using => :ratings_average
    time :published_at
    string :sort_title do
      title.downcase.sub(/^(an?|the)\W+/, ''/) if title = self.title
    end
  end

See Sunspot.setup for more information.

Note that in order for a class to be searchable, it must have an adapter
registered for itself or one of its subclasses. Adapters allow Sunspot to load
objects out of persistent storage, and to determine their primary key for
indexing. {Sunspot::Rails}[http://github.com/outoftime/sunspot_rails] comes with
an adapter for ActiveRecord objects, but for other types of models you will need
to define your own. See Sunspot::Adapters for more information.

=== Search for objects:
  
  @search = Sunspot.search Post do
    keywords 'great pizza' do 
      highlight :title, :description
    end
    with :author_name, 'Mark Twain'
    with(:blog_id).any_of [2, 14]
    with(:category_ids).all_of [4, 10]
    with(:published_at).less_than Time.now
    any_of do
      with(:expired_at).greater_than(Time.now)
      with(:expired_at, nil)
    end
    without :title, 'Bad Title'
    without bad_instance # specifically exclude this instance from results

    paginate :page => 3, :per_page => 15
    order_by :average_rating, :desc

    facet :blog_id
  end

See Sunspot.search for more information.

=== Work with search results (Haml for readability):

  .facets
    ul.blog_facet
      - @search.facet(:blog_id).rows.each do |row|
        li.facet_row
          = link_to(row.instance.name, params.merge(:blog_id => row.value))
          %span.count== (#{row.count})
  .page_info== Displaying page #{@search.hits.page} of #{@search.hits.per_page} out of #{@search.total} results
  - @search.each_hit_with_result do |hit, post|
    .search_result
      %h3.title
        = link_to(h(hit.stored(:title)), post_url(post))
      - if hit.score
        %span.relevance== (#{hit.score})
      %p= hit.highlight(:description).format { |word| "<span class=\"highlight\">#{word}</span>" }
  .pagination= will_paginate(@search.hits)

== About the API documentation

All of the methods documented in the RDoc are considered part of Sunspot's
public API. Methods that are not part of the public API are documented in the
code, but excluded from the RDoc. If you find yourself needing to access methods
that are not part of the public API in order to do what you need, please contact
me so I can rectify the situation!

== Dependencies

1. RSolr
2. Java 1.5+

Sunspot has been tested with MRI 1.8.6 and 1.8.7, REE 1.8.6, YARV 1.9.1, and
JRuby 1.2.0

== Bugs

Please submit bug reports to
http://outoftime.lighthouseapp.com/projects/20339-sunspot

== Contribution Guidelines

Contributions are very welcome - both new features, enhancements, and bug fixes.
Bug reports with a failing regression test are also lovely. In order to keep the
contribution process as organized and smooth as possible, please follow these
guidelines:

* Contributions should be submitted via Sunspot's Lighthouse account, with an
  attached git patch. See below for how to create a git patch.
* Patches should not make any changes to the gemspec task other than
  adding/removing dependencies (e.g., changing the name, version, email,
  description, etc.)
* Patches should not include any changes to the gemspec itself.
* Document any new methods, options, arguments, etc.
* Write tests.
* As much as possible, follow the coding and testing styles you see in existing
  code. One could accuse me of being nitpicky about this, but consistent code is
  easier to read, maintain, and enhance.
* Don't make any massive changes to the structure of library or test code. If
  you think something needs a huge refactor or rearrangement, shoot me a
  message; trying to apply that kind of patch without warning opens the door to
  a world of conflict hurt.

Here's how to create a Git patch - assuming you're pulling from the canonical
Sunspot repository at `upstream`:

  git fetch upstream
  git format-patch --stdout upstream/master.. > my-awesome.patch


= Sunspot::Rails

Sunspot::Rails is a Rails plugin that provides drop-in integration of the
Sunspot[http://outoftime.github.com/sunspot] Solr search library with Rails. It
provides the following features:

* Configure Sunspot using config/sunspot.yml
* Extend ActiveRecord for easy index configuration, search, and indexing
* Automatically index ActiveRecord objects when they are saved, and remove them
  from the index when they are destroyed (can be disabled)
* Automatically commit Solr changes at the end of each request (can be disabled)
* Provide utility methods to find and fix orphaned documents and rebuild the
  Solr index for a given class
* Provide rake tasks for starting and stopping the development Solr instance,
  using the configuration in sunspot.yml

Sunspot::Rails has been tested with Rails versions 2.3 and 3.0

== Installation in Rails 3

In your <code>Gemfile</code>:

  gem 'sunspot_rails'

== Installation in Rails 2

In your project's <code>config/environment.rb</code>, add the following gem dependencies:

  config.gem 'sunspot'
  config.gem 'sunspot_rails'
    
Install the gems with:

  rake gems:install

Generate the file <code>config/sunspot.yml</code>:

  script/generate sunspot

Rails doesn't automatically load rake tasks from plugins installed as gems
(https://rails.lighthouseapp.com/projects/8994/tickets/59). If you installed
Sunspot::Rails as a gem, add the following line to your project's Rakefile:

  require 'sunspot/rails/tasks'

== Using Sunspot::Rails

If you wish to make modifications to the Solr schema, you can create a custom
Solr home in your project directory. In order to do so, create the directory
<code>RAILS_ROOT/solr/conf</code>, and copy in the contents of the Solr gem's
<code>solr/solr/conf</code> directory. If the files are in the right place,
Sunspot::Rails will detect them and tell Solr to use your local configurations.
Use caution when modifying <code>schema.xml</code> - Sunspot relies on the
field naming scheme in the packaged schema file.

To start up a Solr instance, issue the following:

  rake sunspot:solr:start

Note that using the built-in Solr instance packaged with Sunspot is great for
development, but is not recommended for production. See the Sunspot
documentation for more information.

== Usage

=== Setup

In order for an ActiveRecord model to be indexable and searchable, it must be
configured for search. For example:

  class Post < ActiveRecord::Base
    searchable do
      text :title, :body
      integer :blog_id
      time :updated_at
      string :sort_title do
        title.downcase.sub(/^(an?|the) /, '')
      end
    end
  end

See the documentation for Sunspot.setup for full details on what can go in the
configuration block.

=== Indexing

By default, models are indexed whenever they are saved, and removed from the
index whenever they are destroyed. This behavior can be disabled:

  class Post < ActiveRecord::Base
    searchable :auto_index => false, :auto_remove => false do
      # setup...
    end
  end

Note that <b>using the <code>:auto_remove</code> option is not recommended
</b>, as destroying an object without removing it from the index will
create an orphaned document in the index, which is a Bad Thing. Turning off
<code>:auto_index</code> is perfectly safe if you prefer to manage indexing manually
(perhaps using a background job).

If you have disabled lifecycle indexing hooks, you can invoke indexing
operations directly on your model:

  post = Post.create
  post.index
  post.remove_from_index

=== Committing

When data is changed in Solr, it is initially stored in memory and not made
available to the currently running searcher instance. Issuing a +commit+ to Solr
will cause it to write the changes to disk, and instantiate a new searcher
instance. This operation is fairly expensive, so rather than issuing a commit
every time a document is added or removed, Sunspot::Rails issues a commit at
the end of any request where data has been added to or removed from Solr. If
you need to immediately issue a commit, bang!-versions of the methods are
available:

  post = Post.create
  post.index!
  # this is the same as...
  post.index
  Sunspot.commit

When writing tests outside of the context of a controller request, you will want
to use one of these two approaches.

=== Searching

Do it like this:

  Post.search do
    with :blog_id, 1
    with(:updated_at).greater_than(Time.now - 2.weeks)
    order :sort_title, :asc
    paginate :page => 1, :per_page => 15
  end

See the documentation for <code>Sunspot.search</code> for all the options
available in the search block, and the information available in the result
block.

=== Searching for IDs

In some situations, you may want to get the IDs for models returned by a search
without actually loading the models out of the database. For that, you can
call +search_ids+, using the same block format as #search. This will return an
array of IDs.


=== Searching for multiple types

Sunspot is entirely agnostic about whether searches are for one or more types;
the only restriction is that columns used for restriction, ordering, etc. are
defined in the same way for all types being searched. Sunspot::Rails does not
provide any additional support for this, since there is not anything useful to
be added, so just use the interface provided by Sunspot:

  Sunspot.search(Post, Comment) do
    with :blog_id, 1
    order :created_at, :asc
  end

Be sure to check out the Sunspot documentation for all the details.

=== Adding search functionality in mixins

Sunspot does not require that search setup for a given class happen all in one
place; it is perfectly acceptable to call the <code>Sunspot.setup</code> method
more than once. This capability is particularly useful for adding search
functionality in mixins. For instance, if you have a +Ratable+ module, you may
wish to add additional search fields for searchable classes that mix in that
module. For example:

  module Ratable
    def self.included(base)
      if base.searchable?
        base.searchable do
          float :average_rating do
            ratings.average(:value)
          end
        end
      end
    end
  end

Note the use of <code>base.searchable?</code> - this ensures that only classes
that already have search enabled will have the additional configuration added.
The above pattern requires that the class be declared searchable before the
module is mixed in; other patterns (such as passing a :searchable option to an
acts_as_-style declaration) may be more flexible.

=== Utility methods

If you need to completely reindex all of the instances of a given model class,
you can issue:

  Post.reindex

If for some reason models get deleted from the database, but not from the index,
they will become index orphans - not a good situation. To get IDs that exist in
the index but not the database, you can use the +index_orphans+ method; to
remove those documents from the index, use +clean_index_orphans+. Note that
neither of these operations should be needed if Sunspot and Sunspot::Rails are
used as intended.


== Testing Solr integration using RSpec

To disable the sunspot-solr integration for your active record models, require
the file `sunspot/rails/spec_helper`

Then, in your spec, use the #disconnect_sunspot method:

  require 'sunspot/rails/spec_helper'

  describe Post do
    disconnect_sunspot
    
    it 'should have some behavior'
      # ...
    end
  end

In all of the examples in this group, all Sunspot calls will be stubbed out. The
Sunspot#search method will return a stub search object that mimics a search with
no results.

= Help and Support

== Further Reading

Reading the {Sunspot documentation}[http://outoftime.github.com/sunspot/docs] is
highly recommended. Sunspot::Rails exists to wrap Sunspot with a Rails-friendly
API, but almost all of the functionality you use in Sunspot::Rails is
implemented in Sunspot.

Posts about Sunspot on my blog are available at http://outofti.me/tagged/sunspot

== Bugs

Please submit bug reports to
http://outoftime.lighthouseapp.com/projects/20339-sunspot

== Ask for help

* Sunspot Discussion: {ruby-sunspot@googlegroups.com}[mailto:ruby-sunspot@googlegroups.com] / http://groups.google.com/group/ruby-sunspot
* IRC: {#sunspot-ruby @ Freenode}[irc://chat.freenode.net/#sunspot-ruby]

== Tutorials and Articles

* {Full-text search in Rails with Sunspot}[http://tech.favoritemedium.com/2010/01/full-text-search-in-rails-with-sunspot.html] (Tropical Software Observations)
* {Sunspot Full-text Search for Rails/Ruby}[http://therailworld.com/posts/23-Sunspot-Full-text-Search-for-Rails-Ruby] (The Rail World)
* {A Few Sunspot Tips}[http://blog.trydionel.com/2009/11/19/a-few-sunspot-tips/] (spiral_code)
* {Sunspot: A Solr-Powered Search Engine for Ruby}[http://www.linux-mag.com/id/7341] (Linux Magazine)
* {Sunspot Showed Me the Light}[http://bennyfreshness.com/2010/05/sunspot-helped-me-see-the-light/] (ben koonse)
* {rails3 + heroku + sunspot : madness}[http://anhaminha.tumblr.com/post/632682537/rails3-heroku-sunspot-madness] (anhaminha)
* {How to get full text search working with Sunspot}[http://cookbook.hobocentral.net/recipes/57-how-to-get-full-text-search] (Hobo Cookbook)
* {Full text search with Sunspot in Rails}[http://hemju.com/2011/01/04/full-text-search-with-sunspot-in-rail/] (hemju)
* {Using Sunspot for Free-Text Search with Redis}[http://masonoise.wordpress.com/2010/02/06/using-sunspot-for-free-text-search-with-redis/] (While I Pondered...)
* {Fuzzy searching in SOLR with Sunspot}[http://www.pipetodevnull.com/past/2010/8/5/fuzzy_searching_in_solr_with_sunspot/] (pipe :to => /dev/null)
* {Default scope with Sunspot}[http://www.cloudspace.com/blog/2010/01/15/default-scope-with-sunspot/] (Cloudspace)
* {Chef recipe for Sunspot in production}[http://gist.github.com/336403]
* {Cucumber and Sunspot}[http://opensoul.org/2010/4/7/cucumber-and-sunspot] (opensoul.org)
* {Testing Sunspot with Cucumber}[http://blog.trydionel.com/2010/02/06/testing-sunspot-with-cucumber/] (spiral_code)
* {Running cucumber features with sunspot_rails}[http://blog.kabisa.nl/2010/02/03/running-cucumber-features-with-sunspot_rails] (Kabisa Blog)
* {Testing Sunspot with Test::Unit}[http://timcowlishaw.co.uk/post/3179661158/testing-sunspot-with-test-unit] (Type Slowly)
* {How To Use Twitter Lists to Determine Influence}[http://www.untitledstartup.com/2010/01/how-to-use-twitter-lists-to-determine-influence/] (Untitled Startup)
* {Sunspot Quickstart}[http://wiki.websolr.com/index.php/Sunspot_Quickstart] (WebSolr)
* {Solr, and Sunspot}[http://www.kuahyeow.com/2009/08/solr-and-sunspot.html] (YT!)
* {The Saga of the Switch}[http://mrb.github.com/2010/04/08/the-saga-of-the-switch.html] (mrb -- includes comparison of Sunspot and Ultrasphinx)

== Contributors

=== Sunspot

* Mat Brown (mat@patch.com)
* Peer Allan (peer.allan@gmail.com)
* Dmitriy Dzema (dima@dzema.name)
* Benjamin Krause (bk@benjaminkrause.com)
* Marcel de Graaf (marcel@slashdev.nl)
* Brandon Keepers (brandon@opensoul.org)
* Peter Berkenbosch (peterberkenbosch@me.com)
* Brian Atkinson
* Tom Coleman (tom@thesnail.org)
* Matt Mitchell (goodieboy@gmail.com)
* Nathan Beyer (nbeyer@gmail.com)
* Kieran Topping
* Nicolas Braem (nicolas.braem@gmail.com)
* Jeremy Ashkenas (jashkenas@gmail.com)
* Dylan Vaughn (dylanvaughn@yahoo.com)
* Brian Durand (brian@embellishedvisions.com)
* Sam Granieri (sam@samgranieri.com)
* Nick Zadrozny (nick@onemorecloud.com)
* Jason Ronallo (jronallo@gmail.com)

=== Sunspot::Rails

* Mat Brown (mat@patch.com)
* Peer Allan (peer.allan@gmail.com)
* Michael Moen (michael@underpantsgnome.com)
* Benjamin Krause (bk@benjaminkrause.com)
* Adam Salter (adam@codebright.net)
* Brandon Keepers (brandon@opensoul.org)
* Paul Canavese (paul@canavese.org)
* John Eberly (jeberly@elctech.com)
* Gert Thiel (gertthiel@gmail.com)

= License

Sunspot and Sunspot::Rails is distributed under the MIT License, copyright (c) 2008-2011 Mat Brown
